/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2009 - 2012 Board of Regents of the University of
 * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck
 * Institute of Molecular Cell Biology and Genetics.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of any organization.
 * #L%
 */

package imagej.legacy;

import ij.ImagePlus;
import imagej.legacy.plugin.LegacyCommand;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

/**
 * <p>
 * The legacy output tracker is responsible for tracking important changes to
 * the legacy ImageJ environment as a result of running a plugin. Important
 * changes include newly created {@link ImagePlus}es and {@link ImagePlus}es
 * whose window has closed.
 * <p>
 * The design maintains a pair of lists for each running {@link LegacyCommand}.
 * This is done by {@link ThreadGroup} rather than by {@link Thread}.
 * 
 * @author Curtis Rueden
 * @author Barry DeZonia
 */
public class LegacyOutputTracker {

	// TODO this class is loaded with static methods. There are certainly ways to
	// remove this need.

	// -- static variables --

	/**
	 * Tracks the tracker associated with each {@link LegacyCommand}'s
	 * {@link ThreadGroup}.
	 */
	private static HashMap<ThreadGroup, LegacyOutputTracker> trackers =
		new HashMap<ThreadGroup, LegacyOutputTracker>();

	// -- instance variables --

	/**
	 * Used to provide the list of output {@link ImagePlus}es associated with a
	 * {@link LegacyCommand}'s {@link ThreadGroup}.
	 */
	private Set<ImagePlus> outputs = new HashSet<ImagePlus>();

	/**
	 * Used to provide the list of closed {@link ImagePlus}es associated with a
	 * {@link LegacyCommand}'s {@link ThreadGroup}.
	 */
	private Set<ImagePlus> closed = new HashSet<ImagePlus>();

	// -- public interface --

	// -- METHODS FOR TRACKING OUTPUTS --

	/**
	 * Gets a list of the currently known output {@link ImagePlus}es generated by
	 * all the threads associated with a single {@link LegacyCommand}. This code
	 * is thread safe.
	 */
	public static synchronized ImagePlus[] getOutputImps() {
		ImagePlus[] emptyList = new ImagePlus[0];
		LegacyOutputTracker tracker = getTracker();
		if (tracker == null) return emptyList;
		return tracker.outputs.toArray(emptyList);
	}

	/**
	 * Add an {@link ImagePlus} to the current output list. Output lists are
	 * associated with {@link ThreadGroup}s hatched by {@link LegacyCommand}s.
	 * This code is thread safe.
	 */
	public static synchronized void addOutput(ImagePlus imp) {
		ThreadGroup group = getGroup();
		if (group == null) return;
		LegacyOutputTracker tracker = trackers.get(group);
		if (tracker == null) {
			tracker = new LegacyOutputTracker();
			trackers.put(group, tracker);
		}
		tracker.outputs.add(imp);
	}

	/**
	 * Remove an {@link ImagePlus} from the current output list. Output lists are
	 * associated with {@link ThreadGroup}s hatched by {@link LegacyCommand}s.
	 * This code is thread safe.
	 */
	public static synchronized void removeOutput(ImagePlus imp) {
		LegacyOutputTracker tracker = getTracker();
		if (tracker == null) return;
		tracker.outputs.remove(imp);
	}

	/**
	 * Return true if the current output list contains the given {@link ImagePlus}
	 * . This code is thread safe.
	 */
	public static synchronized boolean containsOutput(ImagePlus imp) {
		LegacyOutputTracker tracker = getTracker();
		if (tracker == null) return false;
		return tracker.outputs.contains(imp);
	}

	/**
	 * Clears the list of {@link ImagePlus}es stored in the current output list.
	 * This code is thread safe.
	 */
	public static synchronized void clearOutputs() {
		LegacyOutputTracker tracker = getTracker();
		if (tracker == null) return;
		tracker.outputs.clear();
	}

	// -- METHODS FOR TRACKING CLOSED IMAGES --

	/**
	 * Gets a list of the currently known closed {@link ImagePlus}es generated by
	 * all the threads associated with a single {@link LegacyCommand}. This code
	 * is thread safe.
	 */
	public static synchronized ImagePlus[] getClosedImps() {
		ImagePlus[] emptyList = new ImagePlus[0];
		LegacyOutputTracker tracker = getTracker();
		if (tracker == null) return emptyList;
		return tracker.closed.toArray(emptyList);
	}

	/**
	 * Add an {@link ImagePlus} to the current closed list. Closed lists are
	 * associated with {@link ThreadGroup}s hatched by {@link LegacyCommand}s.
	 * This code is thread safe.
	 */
	public static synchronized void addClosed(ImagePlus imp) {
		ThreadGroup group = getGroup();
		if (group == null) return;
		LegacyOutputTracker tracker = trackers.get(group);
		if (tracker == null) {
			tracker = new LegacyOutputTracker();
			trackers.put(group, tracker);
		}
		tracker.closed.add(imp);
	}

	/**
	 * Remove an {@link ImagePlus} from the current closed list. Closed lists are
	 * associated with {@link ThreadGroup}s hatched by {@link LegacyCommand}s.
	 * This code is thread safe.
	 */
	public static synchronized void removeClosed(ImagePlus imp) {
		LegacyOutputTracker tracker = getTracker();
		if (tracker == null) return;
		tracker.closed.remove(imp);
	}

	/**
	 * Return true if the current closed list contains the given {@link ImagePlus}
	 * . This code is thread safe.
	 */
	public static synchronized boolean containsClosed(ImagePlus imp) {
		LegacyOutputTracker tracker = getTracker();
		if (tracker == null) return false;
		return tracker.closed.contains(imp);
	}

	/**
	 * Clears the list of {@link ImagePlus}es stored in the current closed list.
	 * This code is thread safe.
	 */
	public static synchronized void clearClosed() {
		LegacyOutputTracker tracker = getTracker();
		if (tracker == null) return;
		tracker.closed.clear();
	}

	// -- helpers --

	private static ThreadGroup getGroup() {
		return Utils.findLegacyThreadGroup(Thread.currentThread());
	}

	private static LegacyOutputTracker getTracker() {
		ThreadGroup group = getGroup();
		if (group == null) return null;
		return trackers.get(group);
	}

}
