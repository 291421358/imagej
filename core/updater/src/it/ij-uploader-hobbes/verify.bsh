import imagej.updater.core.FilesUploader;
import imagej.updater.core.UpdaterTestUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

import org.scijava.util.FileUtils;

// for Sezpoz
Thread.currentThread().setContextClassLoader(UpdaterTestUtils.class.getClassLoader());

files = UpdaterTestUtils.initialize(new String[0]);
print("Initialized temporary ImageJ directory at " + files.prefix(""));
print("Update site is at " + UpdaterTestUtils.getWebRoot(files));

hasHobbes() {
	files.addUpdateSite("Hobbes", "hobbes://dummy/", "hobbes:123", "", -1);
	try {
		filesUploader = new FilesUploader(files, "Hobbes");
		print("Has uploader: " + filesUploader.hasUploader());
		return true;
	} catch (IllegalArgumentException e) {
		if (!"No uploader found for protocol hobbes".equals(e.getMessage())) {
			e.printStackTrace();
		}
	}
	return false;
}

if (hasHobbes()) {
	print("The uploader for hobbes was found unexpectedly!");
	return false;
}

copyFile(source, target) {
	parent = target.getParentFile();
	if (!parent.isDirectory()) parent.mkdirs();

	in = new FileInputStream(source);
	out = new FileOutputStream(target);
	buffer = new byte[65536];
	for (;;) {
		count = in.read(buffer);
		if (count < 0) break;
		out.write(buffer, 0, count);
	}
	in.close();
	out.close();
}

// copy the custom uploader to the working directory

filename = "ij-updater-hobbes-1.0.0-SNAPSHOT.jar";
source = new File(basedir, "target/" + filename);
target = files.prefix("jars/" + filename);
copyFile(source, target);

files = UpdaterTestUtils.main(files, new String[] { "upload", "--update-site", "ImageJ", "jars/" + filename });
target.delete();
files = UpdaterTestUtils.main(files, new String[] { "list" });

if (!hasHobbes()) {
	print("Now the uploader should have been found, but was not!");
	return false;
}

files.removeUpdateSite("Hobbes");
if (!UpdaterTestUtils.cleanup(files)) {
	print("Cleanup failed");
	return false;
}
